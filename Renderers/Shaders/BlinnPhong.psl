/* CHANGELOG
 * Written by Josh Grooms on 20160903
 */

#version 450 core
#include "Default.hsl"
#include "Lighting.hsl"

out vec4 OutputColor;

in PixelShaderInput
{
    flat int    EntityIndex;
    vec2        TexUV;
    vec3        ToEye;
    vec3        ToLight;
    vec3        WorldNormal;
} Input;



void main(void)
{
    EntityData ids = Entities[Input.EntityIndex];
    MaterialData mat = Materials[ids.MaterialIndex];

    vec3 normal     = normalize(Input.WorldNormal);
    vec3 toEye      = normalize(Input.ToEye);
    vec3 toLight    = normalize(Input.ToLight);
    vec3 halfway    = normalize(toLight + toEye);

    vec3 color      = mat.IsTextured ? texture(mat.Texture, Input.TexUV).rgb : mat.PrimaryColor.rgb;

    vec3 diffuse    = max(dot(normal, toLight), 0.25) * mat.PrimaryColor.rgb;
    vec3 specular   = SpecularBlinnPhong(normal, toLight, toEye, mat.SpecularPower) * mat.SecondaryColor.rgb;

    OutputColor = vec4(color * (diffuse + specular), mat.PrimaryColor.a);
}
