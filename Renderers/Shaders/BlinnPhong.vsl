/* CHANGELOG
 * Written by Josh Grooms on 20160903
 */

#version 450 core
#include "Default.hsl"

layout(location = 0) in vec3 Position;
layout(location = 1) in vec3 Normal;
layout(location = 2) in vec2 UV;


out PixelShaderInput
{
    flat int    EntityIndex;
    vec2        TexUV;
    vec3        ToEye;
    vec3        ToLight;
    vec3        WorldNormal;
} Output;


uniform vec3 LightPosition = vec3(-100, 100, 20);


void main(void)
{
    EntityData ids          = Entities[gl_BaseInstanceARB];
    TransformData xforms    = Transformations[ids.TransformIndex];

    mat4 worldViewTransform = PerFrameData[0].View * xforms.WorldTransform * xforms.ModelTransform;
    vec4 viewPosition       = worldViewTransform * vec4(Position, 1.0);
    vec4 lightPosition      = PerFrameData[0].View * vec4(LightPosition, 1.0);
    
    Output.EntityIndex  = gl_BaseInstanceARB;
    Output.ToEye        = -viewPosition.xyz;
    Output.ToLight      = LightPosition.xyz - viewPosition.xyz;
    Output.TexUV        = (xforms.TextureTransform * vec4(UV, 0.0, 1.0)).xy;
    Output.WorldNormal  = mat3(worldViewTransform) * Normal;

    gl_Position = PerFrameData[0].Projection * viewPosition;
}

