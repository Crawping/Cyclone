TODOS:

- Events
    -- Implement support for return variables
	-- Implement events in Window3D
		> OnDefocus
		> OnFocus
		> OnMinimize

- 2D Rendering
	-- Fonts & text                             (PRELIMINARY)
	-- SVG images                               
        > Path string parsing
        > XML file parsing
    -- Color gradients                          (PRELIMINARY)
    -- Proper scaling of SVG elements           (PRELIMINARY)
        > Convert between pixels/ems
    -- Hit testing								(PRELIMINARY)
    -- Separate:
        > Path materials                        (DONE)

- 3D Rendering
	-- Entity instancing
	-- Patch entities
	-- Proper texture samplers                  (DONE)
    -- BMP textures 
    -- PNG textures
    -- Hit testing
    -- Fix texture property set accessors
    -- Separate:
        > 3D geometry
        > 3D materials

- Buffers
    -- Element subset updates                   (PRELIMINARY)
    -- Persistently mapped buffers				(PRELIMINARY)
    -- Direct storage access & manipulation

- Primitive Types
	-- Arbitrary precision numbers
	-- Clock
	-- Random Number Generator (RNG)
	-- Implement ICollection interface			(PRELIMINARY)
	-- Generalized multidimensional arrays
    -- Data streams
    -- Sets                                     (DONE)
        > Fix indexing speed issues
    -- Vectors                                  (PRELIMINARY)
        > Static checking of initializer list
          length for stack vectors
    -- List-like vectors                        (PRELIMINARY)
    -- Trees
        > BST                                   (PRELIMINARY)
        > BVH
        > Quadtree                              (PRELIMINARY)
        > Octree

- Rename
    -- Point2D -> Circle2D

- General
	-- Integrate exception throws
    -- Implement HID control interface			(DONE)
        > Fix character input recognition
    -- Display3D class for monitor info
	-- Copy prevention for critical resources
	-- Picking & hit testing
    -- Remove OpenGL from EnumerationsGL
    -- State settings for the GPU class         (DONE)
    -- Define & standardize some kind of 
       update system
    -- Refactor NVPR into SVG

- Scenes
    -- Varying vertex layouts                   (REMOVED)
    -- Varying shader pipelines
        > Compute                               (PRELIMINARY)
        > Deferred
        > Forward
        > Indirect

- Shaders
	-- Make 'include' directive more robust
	-- Implement a 'define' directive

- User Interface
    -- Panels
    -- Buttons
        > Regular
        > Toggle
        > Checkboxes
        > Radio
        > Spin buttons
    -- Menus
        > Context
        > Menu items
    -- Text box
        > Editable text box
    -- Lists
        > Expandable list/tree box
    -- Progress bars
    -- Sliders
    -- Separate:
        > Behaviors
        > Geometry data
        > Style/material data

===============================================================================================================================

SCENE ORGANIZATION
- Scene
    -- Collections of scene layers
    
    -- Scene Layers
        > Collections of scene components
            >> 
    
        > Scene Components
            >> Collections of rendering stages
                x Topology-specific stages
                x Indexed/non-indexed stages
                
            >> Rendering Stages
                x Collections of rendering data and associated logic
                    xx Graphics Settings
                    xx Buffer Configuration
                    xx Rendering Topology
                    xx Rendering Logic



- Per-pipeline buffers
    -- Per-topology geometry buffers
        > Per-vertex-layout draw buffers
    -- Secondary resources

- Execution
    -- Iterate through each pipeline object
        > Iterate through each draw buffer
            >> Bind the draw buffer
            >> Bind secondary resources for the draw buffer
            >> Execute the pipeline

===============================================================================================================================

RENDERABLE ENTITIES
- Appearance
    -- Material
    -- Illuminance, specularity, lighting parameters
    -- Texture(s)
    -- Color(s)

- Behaviors
    -- HID interactions
    -- Entity interactions
    
- Graphics Settings


- Component Entities
    -- Some components might require different shading parameters

- Geometry
    -- Bounding volume
    -- Vertices & indices
    -- Model transformation?
    -- World transformation
    -- Vertex topology

===============================================================================================================================

EXAMPLE SCENE RENDERING TASK
- Make a bunch of geometric primitives
    > Points
    > Triangles
    > Patches

- Make associated appearances for primitives
    > Single color
    > Textured
    > Translucent and textured and colored

- Bind a shader pipeline
    > Points
        > Subroutines of another pipeline?
        > Altogether separate pipeline
    > Triangles
        > Another pipeline
    > Patches
        > Yet another pipeline with geometry and tessellation shaders

- Bind buffers containing entity information

- Render a set of related geometry

===============================================================================================================================

GEOMETRY ORGANIZATION
- Per shader pipeline
    -- Per topology
        > Per vertex layout

- Need to find out which resource type is the most expensive to switch out on the GPU
    -- My initial belief is that shader pipelines are the most expensive type of switch

===============================================================================================================================

