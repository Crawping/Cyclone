TODOS:

- Events
	-- Fix event structures						(DONE)
    -- Implement support for return variables
	-- Implement events in Window3D
		> OnButtonPress                         (DONE)
		> OnButtonRelease                       (DONE)
		> OnClose 								(DONE)
		> OnDefocus
		> OnFocus
		> OnKeyPress							(DONE)
		> OnKeyRelease							(DONE)
		> OnMinimize
		> OnPointerMotion                       (DONE)
		> OnResize								(DONE)

- 2D Rendering
	-- Fonts & text                             (PRELIMINARY)
	-- SVG images                               
        > Path string parsing
        > XML file parsing
    -- Rounded rectangles                       (DONE)
    -- Color gradients
    -- Enable/disable stroking & filling        (DONE)
    -- Proper scaling of SVG elements
        > Pixels                                (DONE)
        > Ems                                   (DONE)
    -- Hit testing								(PRELIMINARY)

- 3D Rendering
	-- Entity instancing
	-- Indexed rendering                        (DONE)
	-- Patch entities
	-- Implement IUpdatable Interface           (DONE)
	-- Customizable vertex layouts              (DONE)
	-- Proper texture samplers
    -- BMP textures 
    -- JPEG textures                            (DONE)
    -- PNG textures
    -- Hit testing
    -- Fix texture property set accessors

- Buffers
    -- Vertex index buffer                      (DONE)
    -- Element subset updates                   (PRELIMINARY)
    -- Persistently mapped buffers				(PRELIMINARY)
    -- Customizable access intents				(DONE)
    -- Direct storage access & manipulation
    -- Configurable MSAA counts for FBOs        (DONE)

- Primitive Types
	-- Arbitrary precision numbers
	-- Camera class 							(DONE)
	-- Clock
	-- Random Number Generator (RNG)
	-- Implement ICollection interface			(PRELIMINARY)
	-- Generalized Multidimensional Arrays
	-- Lists									(DONE)
        > Efficient iteration                   (DONE)
    -- Vectors                                  (PRELIMINARY)
        > Static checking of initializer list
          length for stack vectors
    -- Trees
        > BST
        > Quadtree                              (PRELIMINARY)
        > Octree

- Rename
	-- GraphicsArray		-> ArrayBuffer      (DONE)
	-- GraphicsMap			-> MapBuffer		(DONE)
    -- Geometry             -> Geometry3D       (DONE)
	-- Primitives Folder	-> Geometry         (DONE)
    -- Vertices             -> Vertex           (DONE)

- General
	-- Integrate exception throws
    -- Implement HID control interface			(DONE)
        > Fix character input recognition
    -- MSAA										(DONE)
    -- Display3D class for monitor info
	-- Copy prevention for critical resources
	-- Fix multithreaded compilation            (DONE)
	-- Picking & hit testing
    -- Remove OpenGL from EnumerationsGL
    -- State settings for the GPU class         (PRELIMINARY)

- Scenes
    -- Varying vertex topologies				(DONE)
    -- Varying vertex layouts                   (PRELIMINARY)
    -- Varying shader pipelines
        > Compute                               (PRELIMINARY)
        > Deferred
        > Forward
        > Indirect

- Shaders
	-- Make 'include' directive more robust
	-- Implement a 'define' directive
	-- Blinn-Phong lighting						(DONE)

===============================================================================================================================

SCENE ORGANIZATION
- Per-pipeline buffers
    -- Per-topology geometry buffers
        > Per-vertex-layout draw buffers
    -- Secondary resources

- Execution
    -- Iterate through each pipeline object
        > Iterate through each draw buffer
            >> Bind the draw buffer
            >> Bind secondary resources for the draw buffer
            >> Execute the pipeline

===============================================================================================================================

RENDERABLE ENTITIES
- Appearance
    -- Material
    -- Illuminance, specularity, lighting parameters
    -- Texture(s)
    -- Color(s)

- Component Entities
    -- Some components might require different shading parameters

- Geometry
    -- Bounding volume
    -- Vertices & indices
    -- Model transformation?
    -- World transformation
    -- Vertex topology

===============================================================================================================================

GPU PIPELINES
- Blend Settings

- Base/Clear Color

- Shader Stages

===============================================================================================================================

EXAMPLE SCENE RENDERING TASK
- Make a bunch of geometric primitives
    > Points
    > Triangles
    > Patches

- Make associated appearances for primitives
    > Single color
    > Textured
    > Translucent and textured and colored

- Bind a shader pipeline
    > Points
        > Subroutines of another pipeline?
        > Altogether separate pipeline
    > Triangles
        > Another pipeline
    > Patches
        > Yet another pipeline with geometry and tessellation shaders

- Bind buffers containing entity information

- Render a set of related geometry

===============================================================================================================================

GEOMETRY ORGANIZATION
- Per shader pipeline
    -- Per topology
        > Per vertex layout

- Need to find out which resource type is the most expensive to switch out on the GPU
    -- My initial belief is that shader pipelines are the most expensive type of switch

===============================================================================================================================

