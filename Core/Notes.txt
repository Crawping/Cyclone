TODOS:

- Events
	-- Fix event structures						(DONE)
	-- Implement events in Window3D
		> OnClickPress
		> OnClickRelease
		> OnClose 								(DONE)
		> OnDefocus
		> OnFocus
		> OnKeyPress
		> OnKeyRelease
		> OnMinimize
		> OnPointerMotion
		> OnResize								(DONE)

- 2D Rendering
	-- Fonts & text
	-- SVG images
        > For both of the above, look into the 'NV_path_rendering' NVIDIA extension

- 3D Rendering
	-- Entity instancing
	-- Indexed rendering                        (PRELIMINARY)
	-- Patch entities
	-- Implement IUpdatable Interface           (DONE)
	-- Customizable vertex layouts              (DONE)

- Buffers
    -- Vertex index buffer                      (DONE)
    -- Reorganize with template specialization
    -- Element subset updates                   (PRELIMINARY)

- Primitive Types
	-- Arbitrary precision numbers
	-- Clock
	-- Random Number Generator (RNG)

- Rename
	-- GraphicsArray		-> ArrayBuffer      (DONE)
	-- GraphicsMap			-> MapBuffer		(DONE)
	-- Primitives Folder	-> Geometry         (DONE)
    -- Vertices             -> Vertex           (DONE)

- General
	-- Integrate exception throws
    -- Implement HID control interface
    -- MSAA
    -- Display3D class for monitor info
	-- Copy prevention for critical resources

- Scenes
    -- Varying vertex topologies				(DONE)
    -- Varying vertex layouts                   (IN PROGRESS)
    -- Varying shader pipelines
        > Compute
        > Deferred
        > Forward
        > Indirect

- Shaders
	-- Make 'include' directive more robust
	-- Implement a 'define' directive
	-- Blinn-Phong lighting						(DONE)

===============================================================================================================================

SCENE ORGANIZATION
- Per-pipeline buffers
    -- Per-topology geometry buffers
        > Per-vertex-layout draw buffers
    -- Secondary resources

- Execution
    -- Iterate through each pipeline object
        > Iterate through each draw buffer
            >> Bind the draw buffer
            >> Bind secondary resources for the draw buffer
            >> Execute the pipeline

===============================================================================================================================

RENDERABLE ENTITIES
- Appearance
    -- Material
    -- Illuminance, specularity, lighting parameters
    -- Texture
    -- Base Color

- Component Entities

- Geometry
    -- Vertices & indices
    -- World transformation
    -- Vertex topology

===============================================================================================================================

GPU PIPELINES
- Blend Settings

- Base/Clear Color

- Shader Stages

===============================================================================================================================

EXAMPLE SCENE RENDERING TASK
- Make a bunch of geometric primitives
    > Points
    > Triangles
    > Patches

- Make associated appearances for primitives
    > Single color
    > Textured
    > Translucent and textured and colored

- Bind a shader pipeline
    > Points
        > Subroutines of another pipeline?
        > Altogether separate pipeline
    > Triangles
        > Another pipeline
    > Patches
        > Yet another pipeline with geometry and tessellation shaders

- Bind buffers containing entity information

- Render a set of related geometry

===============================================================================================================================

GEOMETRY ORGANIZATION
- Per shader pipeline
    -- Per topology
        > Per vertex layout

- Need to find out which resource type is the most expensive to switch out on the GPU
    -- My initial belief is that shader pipelines are the most expensive type of switch
